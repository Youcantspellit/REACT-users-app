{"version":3,"sources":["components/Card.js","components/Cards.js","data.js","components/App.js","serviceWorker.js","index.js"],"names":["styled","figure","_templateObject","Card","react_default","a","createElement","className","style","textAlign","src","this","props","sylviyalikeavatar","alt","uname","email","Component","CardsSection","section","Cards_templateObject","Cards","state","users","map","item","components_Card","key","id","username","avatar","navItems","App","href","i","components_Cards","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sXAGmBA,IAAOC,OAAVC,KAAhB,IAoBeC,mLAbP,OACIC,EAAAC,EAAAC,cAAA,cAAYC,UAAU,SAASC,MAAO,CAAEC,UAAW,WAC/CL,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,KAAKC,MAAMC,kBAAmBC,IAAI,SAC5CV,EAAAC,EAAAC,cAAA,kBACIF,EAAAC,EAAAC,cAAA,mBAAWK,KAAKC,MAAMG,OACtBX,EAAAC,EAAAC,cAAA,oBAAYK,KAAKC,MAAMI,gBAPxBC,8KCFnB,IAAMC,EAAelB,IAAOmB,QAAVC,KAoBHC,6MAVXC,MAAQ,2EAEJ,OAAQlB,EAAAC,EAAAC,cAACY,EAAD,KAIDP,KAAKC,MAAMW,MAAMC,IAAI,SAAAC,GAAI,OAAIrB,EAAAC,EAAAC,cAACoB,EAAD,CAAMC,IAAKF,EAAKG,GAAIb,MAAOU,EAAKI,SAAUb,MAAOS,EAAKT,MAAOH,kBAAmBY,EAAKK,mBAP7Gb,aCdPM,EAAQ,CACjB,CACIK,GAAI,EACJC,SAAU,WACVC,OAAQ,8DACRd,MAAO,uBAEX,CACIY,GAAI,EACJC,SAAU,YACVC,OACI,uEACJd,MAAO,kBAEX,CACIY,GAAI,EACJC,SAAU,cACVC,OAAQ,mEACRd,MAAO,2BAEX,CACIY,GAAI,EACJC,SAAU,gBACVC,OACI,qEACJd,MAAO,wBAEX,CACIY,GAAI,EACJC,SAAU,YACVC,OACI,qEACJd,MAAO,uBAEX,CACIY,GAAI,EACJC,SAAU,aACVC,OACI,uEACJd,MAAO,0BAEX,CACIY,GAAI,EACJC,SAAU,WACVC,OACI,qEACJd,MAAO,6BAEX,CACIY,GAAI,EACJC,SAAU,WACVC,OACI,4EACJd,MAAO,6BAEX,CACIY,GAAI,EACJC,SAAU,cACVC,OACI,uEACJd,MAAO,oBAEX,CACIY,GAAI,GACJC,SAAU,UACVC,OAAQ,kEACRd,MAAO,yBC/DTe,EAAW,CAAC,OAAQ,WAAY,WAsBvBC,mLAjBX,OACE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,KAAR,mBAEF7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGyB,EAASP,IAAI,SAACC,EAAMS,GAAP,OAAa9B,EAAAC,EAAAC,cAAA,MAAIqB,IAAKO,GAAIT,QAI9CrB,EAAAC,EAAAC,cAAC6B,EAAD,CAAOZ,MAAOA,YAdJN,aCKEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.270ee04f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components'\n\nconst figureCard = styled.figure`\n    color:red;\n    /* img{\n        width:100%\n    }* /`\nclass Card extends Component {\n    render() {\n        return (\n            <figureCard className=\"figure\" style={{ textAlign: \"center\" }}>\n                <img src={this.props.sylviyalikeavatar} alt=\"girl\" />\n                <figcaption>\n                    <h3>Name: {this.props.uname}</h3>\n                    <h2>Email: {this.props.email}</h2>\n\n                </figcaption>\n\n            </figureCard>);\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\n\n\nimport styled from 'styled-components'\nimport Card from \"./Card\";\n\nconst CardsSection = styled.section`\n    display: grid;\n    grid-template-columns: repeat(4,1fr);\n   \n    \n    color:red;\n`\n\n\nclass Cards extends Component {\n    state = {}\n    render() {\n        return (<CardsSection /* style={{\n            display: \"grid\",\n            gridTemplateColumns: \"repeat(4,1fr)\",\n            width: \"100%\"\n        }} */>{this.props.users.map(item => <Card key={item.id} uname={item.username} email={item.email} sylviyalikeavatar={item.avatar} />)}</CardsSection>);\n    }\n}\n\nexport default Cards;","\nexport const users = [\n    {\n        id: 1,\n        username: \"hearngy0\",\n        avatar: \"https://robohash.org/ametearumeos.jpg?size=200x200&set=set1\",\n        email: \"binmett0@flickr.com\"\n    },\n    {\n        id: 2,\n        username: \"ddraisey1\",\n        avatar:\n            \"https://robohash.org/odioducimuslaudantium.jpg?size=200x200&set=set1\",\n        email: \"jmakey1@gov.uk\"\n    },\n    {\n        id: 3,\n        username: \"wkennifick2\",\n        avatar: \"https://robohash.org/laboriosameosodio.jpg?size=200x200&set=set1\",\n        email: \"rbeedie2@washington.edu\"\n    },\n    {\n        id: 4,\n        username: \"fantognozzii3\",\n        avatar:\n            \"https://robohash.org/officiisnesciuntvel.jpg?size=200x200&set=set1\",\n        email: \"rovershott3@dell.com\"\n    },\n    {\n        id: 5,\n        username: \"lmeadway4\",\n        avatar:\n            \"https://robohash.org/estarchitectomaxime.jpg?size=200x200&set=set1\",\n        email: \"ploan4@illinois.edu\"\n    },\n    {\n        id: 6,\n        username: \"sscurlock5\",\n        avatar:\n            \"https://robohash.org/quicupiditateadipisci.jpg?size=200x200&set=set1\",\n        email: \"zschout5@posterous.com\"\n    },\n    {\n        id: 7,\n        username: \"bcabena6\",\n        avatar:\n            \"https://robohash.org/voluptateautemnulla.jpg?size=200x200&set=set1\",\n        email: \"kmarklund6@guardian.co.uk\"\n    },\n    {\n        id: 8,\n        username: \"diacobo7\",\n        avatar:\n            \"https://robohash.org/laudantiumfugiataspernatur.jpg?size=200x200&set=set1\",\n        email: \"aholehouse7@delicious.com\"\n    },\n    {\n        id: 9,\n        username: \"agrimbleby8\",\n        avatar:\n            \"https://robohash.org/consequaturquieveniet.jpg?size=200x200&set=set1\",\n        email: \"gklima8@tamu.edu\"\n    },\n    {\n        id: 10,\n        username: \"sbrady9\",\n        avatar: \"https://robohash.org/doloremquiaautem.jpg?size=200x200&set=set1\",\n        email: \"fklehyn9@godaddy.com\"\n    }\n];","import React, { Component } from 'react';\nimport Cards from \"./Cards\";\nimport { users } from \"../data\"\n\nconst navItems = [\"Home\", \"About us\", \"Contact\"];\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <header className=\"App-header\">\n          <div className=\"logo\">\n            <a href=\"/\">Users Cool App</a>\n          </div>\n          <nav>\n            <ul>\n              {navItems.map((item, i) => <li key={i}>{item}</li>)}\n            </ul>\n          </nav>\n        </header>\n        <Cards users={users} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}